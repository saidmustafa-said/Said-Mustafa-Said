{
    "timeline": [
        {
            "id": 18,
            "project_name": "Step Functions Workflow Implementation",
            "description": "A project to automate and manage decision-making processes using AWS Step Functions. It ensures data validation, error handling, and efficient task execution.",
            "year": 2024,
            "month": 9,
            "technologies_used": [
                "AWS Step Functions",
                "AWS Lambda"
            ]
        },
        {
            "id": 17,
            "project_name": "AWS Infrastructure Setup with Terraform",
            "description": "Automated AWS infrastructure provisioning using Terraform, incorporating services like EKS, RDS, MongoDB, and Vault for a cloud-based application setup.",
            "year": 2024,
            "month": 9,
            "technologies_used": [
                "Terraform",
                "AWS VPC & Subnets",
                "AWS Route 53",
                "AWS Elastic Load Balancer (ALB)",
                "Amazon EKS",
                "Amazon RDS",
                "AWS MongoDB",
                "Amazon Elasticache",
                "Vault HCP",
                "Service Mesh",
                "Cloud Security"
            ]
        },
        {
            "id": 16,
            "project_name": "Migration and Scalability",
            "description": "The project involved improving scalability by separating an EC2 instance running an application and two databases (Milvus and Supabase), and implementing auto-scaling for the application.",
            "year": 2023,
            "month": 8,
            "technologies_used": [
                "AWS EC2",
                "AWS VPC & Subnets",
                "AWS ALB",
                "Docker & Docker Compose",
                "Auto-Scaling"
            ]
        },
        {
            "id": 15,
            "project_name": "OCR Read Using Large Language Models (LLM) for Readability and Understanding",
            "description": "The project utilized large language models (LLMs) for Optical Character Recognition (OCR) to extract and structure menu data from images. The task also involved addressing Turkish special character encoding issues and ensuring data was output in a structured JSON format.",
            "year": 2024,
            "month": 8,
            "technologies_used": [
                "AWS Bedrock",
                "Claude 3 Haiku",
                "Python",
                "Data Processing",
                "Encryption"
            ]
        },
        {
            "id": 14,
            "project_name": "Deploying and Integrating Kubeflow on AWS EKS",
            "description": "The goal of this project was to deploy Kubeflow on AWS EKS, manage machine learning pipelines, and integrate MLflow for enhanced model tracking and experimentation.",
            "year": 2024,
            "month": 7,
            "technologies_used": [
                "Kubeflow",
                "AWS VPC & Subnets",
                "AWS EKS",
                "MLflow"
            ]
        },
        {
            "id": 13,
            "project_name": "AI Model Fine-Tuning with Data Collection and Evaluation",
            "description": "The project aimed to fine-tune an AI model through a structured data collection process, followed by evaluation and optimization to improve model performance using custom prompts.",
            "year": 2024,
            "month": 6,
            "technologies_used": [
                "AI Model Fine-Tuning",
                "Data Collection",
                "Supervised Learning",
                "Data Cleaning",
                "Feature Engineering",
                "Model Optimization"
            ]
        },
        {
            "id": 12,
            "project_name": "Migration from Apache Cassandra on EC2 to Apache Cassandra on AWS EKS",
            "description": "Successfully migrated data between two Apache Cassandra clusters, moving from an EC2-hosted environment to AWS EKS-hosted Cassandra. Focused on data consistency, minimal downtime, and schema replication.",
            "year": 2024,
            "month": 5,
            "technologies_used": [
                "Apache Cassandra",
                "AWS VPC & Subnets",
                "Apache Spark",
                "AWS EKS"
            ]
        },
        {
            "id": 11,
            "project_name": "AWS Services Architecture Implementation Using Terraform",
            "description": "Implemented scalable AWS infrastructure using AWS Elastic Container Service (ECS), AWS Elastic Compute Cloud (EC2), Auto Scaling Groups (ASG) with GPU instances, and Application Load Balancers (ALB) for secure and efficient traffic management. Automated deployment with Terraform.",
            "year": 2024,
            "month": 4,
            "technologies_used": [
                "Terraform",
                "AWS VPC & Subnets",
                "AWS ECS",
                "AWS EC2",
                "AWS Application Load Balancer (ALB)"
            ]
        },
        {
            "id": 10,
            "project_name": "Chat Interface with Large Language Models (LLM) for CLI Command Execution",
            "description": "An interactive chat interface built with Streamlit that integrates multiple Large Language Models (LLMs) to process user queries and execute corresponding CLI commands, with a control mechanism for accuracy and a Retrieval-Augmented Generation (RAG) system for improved performance.",
            "year": 2024,
            "month": 3,
            "technologies_used": [
                "Streamlit",
                "Llama 3",
                "AWS Bedrock",
                "Claude Models",
                "Retrieval-Augmented Generation (RAG)"
            ]
        },
        {
            "id": 9,
            "project_name": "AWS Connect Call Center Integration and AWS Infrastructure",
            "description": "Designed and implemented a scalable, secure call center system using AWS Connect, integrating various AWS services like AWS Lambda, AWS DynamoDB, AWS S3, AWS Kinesis Data Firehose, AWS EventBridge, AWS Simple Queue Service (SQS), and AWS QuickSight to enhance customer service and provide real-time data processing and analytics.",
            "year": 2024,
            "month": 2,
            "technologies_used": [
                "AWS Connect",
                "AWS VPC & Subnets",
                "AWS Lambda",
                "AWS DynamoDB",
                "AWS S3",
                "AWS Kinesis Data Firehose",
                "AWS QuickSight",
                "AWS EventBridge",
                "AWS SQS",
                "AWS RDS"
            ]
        },
        {
            "id": 8,
            "project_name": "Terraform and CI/CD for AWS Services with Multi-Environment Setup",
            "description": "Set up AWS infrastructure using Terraform and implemented a CI/CD pipeline to manage deployments across production and staging environments. The project involved the configuration of various AWS services including AWS CodePipeline, AWS RDS, AWS VPC, AWS ECS, Redis, AWS Application Load Balancer (ALB), Bastion EC2, AWS SES, AWS Route 53, and SSL certificates.",
            "year": 2024,
            "month": 1,
            "technologies_used": [
                "Terraform",
                "AWS Services",
                "CI/CD Pipeline",
                "Multi-Environment Setup",
                "AWS ECS",
                "AWS RDS",
                "AWS Redis",
                "AWS SSL Certificates",
                "AWS Route 53"
            ]
        },
        {
            "id": 7,
            "project_name": "AWS Infrastructure and CI/CD with Terraform",
            "description": "This project involved setting up an AWS infrastructure using Terraform and implementing a Continuous Integration/Continuous Deployment (CI/CD) pipeline for automated deployments. The infrastructure included AWS services such as AWS CodePipeline, AWS RDS, AWS VPC, AWS EKS, AWS S3, VPN, and Bastion EC2, with secure connectivity between AWS EKS and AWS RDS.",
            "year": 2023,
            "month": 12,
            "technologies_used": [
                "Terraform",
                "CI/CD Pipeline",
                "AWS CodePipeline",
                "AWS EKS",
                "AWS RDS",
                "AWS VPC",
                "AWS S3",
                "VPN and Bastion EC2"
            ]
        },
        {
            "id": 6,
            "project_name": "Debugging AWS Services Integration",
            "description": "Debugged an AWS environment involving OpenSearch, RDS, ECS, and other services to resolve deployment issues with GPU-enabled EC2 instances within ECS, enabling successful CI/CD processes.",
            "year": 2023,
            "month": 11,
            "technologies_used": [
                "AWS ECS",
                "AWS EC2",
                "AWS OpenSearch",
                "AWS RDS",
                "AWS VPC & Subnets",
                "Application Load Balancer (ALB)",
                "AWS S3",
                "AWS CodePipeline",
                "CloudWatch"
            ]
        },
        {
            "id": 5,
            "project_name": "Terraform and AI Integration for Stable Diffusion",
            "description": "Integrating AWS services with Terraform to create a scalable, cost-optimized environment for image generation using Stable Diffusion. The infrastructure supports AI-based image generation with automated scaling and efficient cost management.",
            "year": 2023,
            "month": 11,
            "technologies_used": [
                "Terraform",
                "AWS VPC & Subnets",
                "AWS Lambda",
                "Stable Diffusion",
                "AWS EC2",
                "AWS DynamoDB",
                "AWS S3",
                "AWS Systems Manager (SSM)",
                "Boto3"
            ]
        },
        {
            "id": 4,
            "project_name": "Terraform for AWS Integration with Redshift and Glue",
            "description": "Extended an existing Terraform setup to integrate AWS Redshift with the existing infrastructure, enabling data processing and analytics capabilities.",
            "year": 2023,
            "month": 10,
            "technologies_used": [
                "Terraform",
                "AWS VPC & Subnets",
                "AWS Redshift",
                "AWS Glue"
            ]
        },
        {
            "id": 3,
            "project_name": "AWS Machine Learning Deployment with Terraform",
            "description": "Automated deployment of ML infrastructure using Terraform, including Elastic Beanstalk, API Gateway, Lambda, and SageMaker for model training and real-time inference.",
            "year": 2023,
            "month": 10,
            "technologies_used": [
                "Terraform",
                "AWS SageMaker",
                "AWS API Gateway",
                "AWS Lambda"
            ]
        },
        {
            "id": 2,
            "project_name": "Advanced AWS Infrastructure with Terraform",
            "description": "Automated complex AWS infrastructure with Terraform, including VPC, CloudFront, EC2, ALB, ElastiCache, AWS MQ, and S3 for high availability and security.",
            "year": 2023,
            "month": 9,
            "technologies_used": [
                "Terraform",
                "AWS CloudFront",
                "AWS ElastiCache",
                "AWS AWS MQ",
                "AWS S3"
            ]
        },
        {
            "id": 1,
            "project_name": "Terraform for AWS",
            "description": "Automated deployment of AWS infrastructure using Terraform, including VPC, MongoDB setup, EC2 instances, and ALB configuration.",
            "year": 2023,
            "month": 9,
            "technologies_used": [
                "Terraform",
                "AWS EC2",
                "AWS VPC & Subnets",
                "AWS ALB",
                "AWS MongoDB"
            ]
        }
    ]
}