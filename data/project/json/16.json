{
	"id": 16,
	"project_name": "Migration and Scalability",
	"description": "The project involved improving scalability by separating an EC2 instance running an application and two databases (Milvus and Supabase), and implementing auto-scaling for the application.",
	"year": 2023,
	"month": 8,
	"role": "",
	"project_type": "individual",
	"technologies_used": [
		{
			"name": "AWS EC2",
			"description": "Cloud service used to host and scale the application and databases."
		},
		{
			"name": "AWS VPC & Subnets",
			"description": "Proficiency in configuring VPCs, subnets (public/private), and routing for secure network communications."
		},
		{
			"name": "AWS ALB",
			"description": "Application Load Balancer used to route traffic to different EC2 instances based on path and service type."
		},
		{
			"name": "Docker & Docker Compose",
			"description": "Used for containerizing the application and databases, allowing easy deployment across instances."
		},
		{
			"name": "Auto-Scaling",
			"description": "Feature that automatically adjusts the number of EC2 instances for the application based on traffic."
		}
	],
	"infrastructure": [
		{
			"name": "EC2 Instances",
			"description": "Used to host both the application and databases in separate instances.",
			"steps": [
				"Launch EC2 instances for application and database hosting.",
				"Configure security groups and network settings for instances.",
				"Set up scaling policies to ensure proper scaling of resources based on demand."
			]
		},
		{
			"name": "Private Subnets",
			"description": "Created private subnets to improve security by isolating EC2 instances.",
			"steps": [
				"Create a Virtual Private Cloud (VPC) with public and private subnets.",
				"Set up routing and security controls for private subnets.",
				"Configure network access between EC2 instances while maintaining security."
			]
		},
		{
			"name": "Application Load Balancer",
			"description": "Used to distribute incoming traffic between different services based on routing configurations.",
			"steps": [
				"Set up ALB with target groups for application and database services.",
				"Configure path-based routing for specific traffic routing."
			]
		},
		{
			"name": "Docker & Docker Compose",
			"description": "Used for containerizing the application and databases, allowing easy deployment across instances.",
			"steps": [
				"Create Docker images for the application and databases.",
				"Write Docker Compose configuration for multi-container management.",
				"Deploy containers on EC2 instances and manage their lifecycle."
			]
		},
		{
			"name": "Auto-Scaling",
			"description": "Feature that automatically adjusts the number of EC2 instances for the application based on traffic.",
			"steps": [
				"Define auto-scaling policies based on traffic demand.",
				"Set up CloudWatch alarms for monitoring performance.",
				"Configure scaling actions to automatically add or remove instances."
			]
		}
	],
	"skills_required": [
		{
			"name": "AWS EC2",
			"description": "Experience with launching, configuring, and managing EC2 instances for application and database hosting."
		},
		{
			"name": "AWS VPC",
			"description": "Proficiency in configuring VPCs, subnets (public/private), and routing for secure network communications."
		},
		{
			"name": "AWS ALB",
			"description": "Experience in setting up and configuring AWS Application Load Balancers, including target groups and traffic routing."
		},
		{
			"name": "Docker & Docker Compose",
			"description": "Strong skills in containerizing applications and databases using Docker and orchestrating them with Docker Compose."
		},
		{
			"name": "Auto-Scaling",
			"description": "Knowledge of configuring auto-scaling for EC2 instances to dynamically manage traffic loads."
		},
		{
			"name": "Database Migration",
			"description": "Experience with database migration and management, particularly with Milvus and Supabase."
		},
		{
			"name": "Security Best Practices",
			"description": "Understanding of security practices like using private subnets and configuring secure access with AWS ALB."
		}
	],
	"challenges_faced": [
		{
			"name": "Scalability",
			"description": "Ensuring the infrastructure could scale dynamically based on traffic."
		},
		{
			"name": "Migration Complexity",
			"description": "Successfully migrating the application and databases to separate instances without downtime."
		},
		{
			"name": "Security",
			"description": "Securing EC2 instances by moving them to private subnets and using proper access controls."
		}
	],
	"outcomes": [
		{
			"name": "Improved Scalability",
			"description": "Implemented auto-scaling for EC2 instances, improving the application's ability to handle varying traffic loads."
		},
		{
			"name": "Separation of Services",
			"description": "Successfully separated the application and databases into different EC2 instances, optimizing performance and security."
		}
	],
	"links": []
}
